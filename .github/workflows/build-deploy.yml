name: 'Build and Deploy Applications'

on:
  push:
    branches: [ "main" ]
    paths: # These path filters will now be the primary gate for push triggers
      - 'applications/**'
      - 'k8s/**'
      - '.github/workflows/build-deploy.yml'
  
  workflow_dispatch:
    inputs:
      deploy_frontend:
        description: 'Deploy Frontend'
        required: true
        default: true
        type: boolean
      deploy_microservices:
        description: 'Deploy Microservices'
        required: true
        default: true
        type: boolean

env:
  REGISTRY_REGION: us-central1
  PROJECT_ID: nahuelgabe-test
  REPOSITORY: dogfydiet-dev-docker-repo

jobs:
  # Build and push Docker images
  build-microservice-1:
    # 'needs: changes' is removed
    # Runs if manually dispatched to deploy microservices OR if it's a push event (filtered by workflow paths)
    if: github.event.inputs.deploy_microservices == 'true' || github.event_name == 'push'
    runs-on: ubuntu-latest # Changed from ubuntu-24.04 in original changes job, ensure consistency or use ubuntu-latest
    environment: dev
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker to use gcloud as a credential helper
      run: gcloud auth configure-docker ${{ env.REGISTRY_REGION }}-docker.pkg.dev

    - name: Build Docker image
      run: |
        cd applications/microservice-1
        docker build -t ${{ env.REGISTRY_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/microservice-1:${{ github.sha }} .
        docker build -t ${{ env.REGISTRY_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/microservice-1:latest .

    - name: Push Docker image
      run: |
        docker push ${{ env.REGISTRY_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/microservice-1:${{ github.sha }}
        docker push ${{ env.REGISTRY_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/microservice-1:latest

  build-microservice-2:
    # 'needs: changes' is removed
    # Runs if manually dispatched to deploy microservices OR if it's a push event (filtered by workflow paths)
    if: github.event.inputs.deploy_microservices == 'true' || github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: dev
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker to use gcloud as a credential helper
      run: gcloud auth configure-docker ${{ env.REGISTRY_REGION }}-docker.pkg.dev

    - name: Build Docker image
      run: |
        cd applications/microservice-2
        docker build -t ${{ env.REGISTRY_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/microservice-2:${{ github.sha }} .
        docker build -t ${{ env.REGISTRY_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/microservice-2:latest .

    - name: Push Docker image
      run: |
        docker push ${{ env.REGISTRY_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/microservice-2:${{ github.sha }}
        docker push ${{ env.REGISTRY_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/microservice-2:latest

  # Deploy frontend
  deploy-frontend:
    # 'needs: changes' is removed
    # Runs if manually dispatched to deploy frontend OR if it's a push event (filtered by workflow paths)
    if: github.event.inputs.deploy_frontend == 'true' || github.event_name == 'push'
    runs-on: ubuntu-22.04
    environment: dev
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: applications/frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd applications/frontend
        npm ci

    - name: Build frontend
      run: |
        cd applications/frontend
        npm run build
      env:
        VUE_APP_API_URL: ${{ secrets.API_URL }}
        VUE_APP_ENVIRONMENT: dev

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Deploy to Cloud Storage
      run: |
        cd applications/frontend
        echo "--- Contents of dist/ folder before rsync ---"
        ls -R dist/
        echo "--- Starting rsync to GCS bucket: ${{ secrets.FRONTEND_BUCKET_NAME }} ---"
        gsutil -m rsync -r -d dist/ gs://${{ secrets.FRONTEND_BUCKET_NAME }}/
        
        echo "--- Setting Cache-Control for HTML files ---"
        gsutil -m setmeta -h "Cache-Control:public, max-age=3600" gs://${{ secrets.FRONTEND_BUCKET_NAME }}/**/*.html
        
        echo "--- Setting Cache-Control for JS and CSS files ---"
        # Estos archivos sabemos que existen por el build de Vue
        gsutil -m setmeta -h "Cache-Control:public, max-age=31536000" gs://${{ secrets.FRONTEND_BUCKET_NAME }}/**/*.js gs://${{ secrets.FRONTEND_BUCKET_NAME }}/**/*.css

        echo "--- Attempting to set Cache-Control for specific optional files ---"
        # Para favicon.ico en la raíz del bucket (si existe en dist/)
        if [ -f dist/favicon.ico ]; then
          echo "Setting metadata for favicon.ico"
          # No se necesita -f aquí. Si el rsync lo copió, el archivo existe en el bucket.
          gsutil -m setmeta -h "Cache-Control:public, max-age=86400" gs://${{ secrets.FRONTEND_BUCKET_NAME }}/favicon.ico
        else
          echo "favicon.ico not found in dist/, skipping metadata for it."
        fi
        
        # Para otros tipos de imágenes. Si no existen, gsutil setmeta imprimirá "No URLs matched"
        # pero no debería fallar todo el paso a menos que sea el único error.
        # Para asegurar que el paso no falle si NO se encuentra NINGÚN archivo de un tipo específico:
        IMAGE_EXTENSIONS=("png" "jpg" "jpeg" "gif" "svg")
        for ext in "${IMAGE_EXTENSIONS[@]}"; do
          echo "Attempting to set metadata for *.$ext files"
          # Ejecutamos el comando en un subshell y usamos '|| true' para que si el comando gsutil
          # devuelve un código de error (por ejemplo, porque no encontró archivos),
          # el 'true' asegure que esta línea particular no haga fallar todo el script.
          (gsutil -m setmeta -h "Cache-Control:public, max-age=31536000" gs://${{ secrets.FRONTEND_BUCKET_NAME }}/**/*.$ext) || echo "No *.$ext files found or non-critical gsutil error for $ext, continuing."
        done

  # Deploy microservices to GKE
  deploy-microservices:
    needs: [build-microservice-1, build-microservice-2] # Depends on the build jobs
    # This condition ensures it runs if either build job succeeds.
    # It will only run if the preceding build jobs were triggered and at least one succeeded.
    if: always() && (needs.build-microservice-1.result == 'success' || needs.build-microservice-2.result == 'success')
    runs-on: ubuntu-latest
    environment: dev

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Install gke-gcloud-auth-plugin
      run: |
        gcloud components install gke-gcloud-auth-plugin --quiet

    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials dogfydiet-dev-cluster --region us-central1 --project ${{ env.PROJECT_ID }}

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Deploy Microservice 1
      # Only run if build-microservice-1 was successful
      if: needs.build-microservice-1.result == 'success'
      run: |
        cd k8s/helm-charts/microservice-1
        helm upgrade --install microservice-1 . \
          --namespace default \
          --set image.repository=${{ env.REGISTRY_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/microservice-1 \
          --set image.tag=${{ github.sha }} \
          --set serviceAccount.name=microservice-1 \
          --set serviceAccount.annotations."iam\.gke\.io/gcp-service-account"=dogfydiet-dev-microservice-1@${{ env.PROJECT_ID }}.iam.gserviceaccount.com \
          --wait

    - name: Deploy Microservice 2
      # Only run if build-microservice-2 was successful
      if: needs.build-microservice-2.result == 'success'
      run: |
        cd k8s/helm-charts/microservice-2
        helm upgrade --install microservice-2 . \
          --namespace default \
          --set image.repository=${{ env.REGISTRY_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/microservice-2 \
          --set image.tag=${{ github.sha }} \
          --set serviceAccount.name=microservice-2 \
          --set serviceAccount.annotations."iam\.gke\.io/gcp-service-account"=dogfydiet-dev-microservice-2@${{ env.PROJECT_ID }}.iam.gserviceaccount.com \
          --wait

    - name: Verify deployment
      run: |
        kubectl get pods -l app.kubernetes.io/instance=microservice-1 -o wide
        kubectl get pods -l app.kubernetes.io/instance=microservice-2 -o wide
        kubectl get services

    - name: Deployment Summary
      run: |
        echo "## 🚀 Application Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Deployed Components:" >> $GITHUB_STEP_SUMMARY
        # Adjust summary based on which components were actually deployed
        if [[ "${{ needs.deploy-frontend.if }}" != "false" && "${{ needs.deploy-frontend.result }}" == "success" ]]; then
          echo "- **Frontend:** Deployed to Cloud Storage" >> $GITHUB_STEP_SUMMARY
        fi
        if [[ "${{ needs.build-microservice-1.if }}" != "false" && "${{ needs.build-microservice-1.result }}" == "success" ]]; then
          echo "- **Microservice 1:** Image tag \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        fi
        if [[ "${{ needs.build-microservice-2.if }}" != "false" && "${{ needs.build-microservice-2.result }}" == "success" ]]; then
          echo "- **Microservice 2:** Image tag \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "1. Test the application endpoints" >> $GITHUB_STEP_SUMMARY
        echo "2. Monitor application health in GCP Console" >> $GITHUB_STEP_SUMMARY
        echo "3. Check application logs: \`kubectl logs -l app=microservice-1\`" >> $GITHUB_STEP_SUMMARY