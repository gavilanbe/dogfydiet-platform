name: 'Terraform Plan'

on:
  pull_request:
    branches: [ "main" ]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-*.yml'

env:
  TF_VERSION: '1.5.7'
  TF_IN_AUTOMATION: true
  TF_INPUT: false

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    environment: dev

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: terraform/environments/dev

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    # Authenticate to Google Cloud
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    # Setup Google Cloud SDK
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    # Verify authentication
    - name: Verify GCP Authentication
      run: |
        gcloud auth list
        gcloud config list project

    # Initialize a new or existing Terraform working directory
    - name: Terraform Init
      run: terraform init

    # Validate terraform files
    - name: Terraform Validate
      run: terraform validate

    # Format check
    - name: Terraform Format Check
      run: terraform fmt -check -recursive

    # Generate an execution plan for Terraform
    - name: Terraform Plan
      run: |
        terraform plan -detailed-exitcode -out=tfplan
      env:
        TF_VAR_notification_email: ${{ secrets.NOTIFICATION_EMAIL }}

    # Save plan output
    - name: Save Terraform Plan
      run: |
        terraform show -no-color tfplan > tfplan.txt

    # Upload plan as artifact
    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan
        path: terraform/environments/dev/tfplan.txt
        retention-days: 30

    # Comment PR with plan output
    - name: Comment Plan Output
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const plan = fs.readFileSync('terraform/environments/dev/tfplan.txt', 'utf8');
          const maxLength = 65536; // GitHub comment max length
          const truncatedPlan = plan.length > maxLength ? 
            plan.substring(0, maxLength) + '\n\n... (truncated)' : plan;
          
          // Find existing comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('Terraform Plan Output')
          );
          
          const commentBody = `## Terraform Plan Output
          
          \`\`\`
          ${truncatedPlan}
          \`\`\`
          
          **Plan Summary:**
          - 📝 Plan generated successfully
          - 🔄 Review changes carefully before applying
          `;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: commentBody
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
          }