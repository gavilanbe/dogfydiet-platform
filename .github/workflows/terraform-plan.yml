name: 'Terraform Plan'

on:
  pull_request:
    branches: [ "main" ]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-*.yml'

env:
  TF_VERSION: '1.5.7'
  TF_IN_AUTOMATION: true
  TF_INPUT: false

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  terraform-security:
    name: 'Security Scan'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Run Checkov security scan
      id: checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: terraform/
        framework: terraform
        output_format: github_failed_only
        soft_fail: true
    
    - name: Run tfsec
      uses: aquasecurity/tfsec-action@v1.0.0
      with:
        working_directory: terraform
        soft_fail: true
        format: github
    
    - name: Upload Security Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-results
        path: |
          checkov-results.sarif
          tfsec-results.sarif
        retention-days: 7

  terraform-validate:
    name: 'Validate Configuration'
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        environment: [dev]  # Add staging, prod as needed
    
    defaults:
      run:
        working-directory: terraform/environments/${{ matrix.environment }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Terraform Format Check
      id: fmt
      run: terraform fmt -check -recursive -diff
      continue-on-error: true
    
    - name: Post Format Check Comment
      if: steps.fmt.outcome == 'failure'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: '‚ùå **Terraform Format Check Failed**\n\nPlease run `terraform fmt -recursive` to fix formatting issues.'
          })
    
    - name: Initialize Terraform
      run: |
        terraform init -backend=false
    
    - name: Validate Terraform
      id: validate
      run: terraform validate

  terraform-plan:
    name: 'Plan Changes'
    needs: [terraform-security, terraform-validate]
    runs-on: ubuntu-latest
    environment: dev
    
    strategy:
      matrix:
        environment: [dev]
    
    defaults:
      run:
        working-directory: terraform/environments/${{ matrix.environment }}
    
    outputs:
      plan_exit_code: ${{ steps.plan.outputs.exit_code }}
      plan_summary: ${{ steps.summary.outputs.summary }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
    
    - name: Initialize Terraform
      run: terraform init
    
    - name: Create Plan
      id: plan
      run: |
        terraform plan -detailed-exitcode -out=tfplan -no-color > plan_output.txt 2>&1 || echo "exit_code=$?" >> $GITHUB_OUTPUT
        echo "exit_code=${exit_code:-0}" >> $GITHUB_OUTPUT
      env:
        TF_VAR_notification_email: ${{ secrets.NOTIFICATION_EMAIL }}
      continue-on-error: true
    
    - name: Generate Plan Summary
      id: summary
      run: |
        PLAN_OUTPUT=$(cat plan_output.txt)
        
        # Extract summary statistics
        RESOURCES_TO_ADD=$(echo "$PLAN_OUTPUT" | grep -E "^  \+" | wc -l || echo "0")
        RESOURCES_TO_CHANGE=$(echo "$PLAN_OUTPUT" | grep -E "^  ~" | wc -l || echo "0")
        RESOURCES_TO_DESTROY=$(echo "$PLAN_OUTPUT" | grep -E "^  -" | wc -l || echo "0")
        
        # Create summary
        SUMMARY="### üìä Terraform Plan Summary\n\n"
        SUMMARY+="| Action | Count |\n"
        SUMMARY+="|--------|-------|\n"
        SUMMARY+="| **Create** | $RESOURCES_TO_ADD |\n"
        SUMMARY+="| **Update** | $RESOURCES_TO_CHANGE |\n"
        SUMMARY+="| **Delete** | $RESOURCES_TO_DESTROY |\n\n"
        
        if [ "$RESOURCES_TO_DESTROY" -gt 0 ]; then
          SUMMARY+="‚ö†Ô∏è **Warning**: This plan includes resource deletions!\n\n"
        fi
        
        echo "summary<<EOF" >> $GITHUB_OUTPUT
        echo "$SUMMARY" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Save Plan Output
      run: |
        terraform show -no-color tfplan > tfplan.txt
    
    - name: Upload Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-${{ matrix.environment }}
        path: |
          terraform/environments/${{ matrix.environment }}/tfplan
          terraform/environments/${{ matrix.environment }}/tfplan.txt
          terraform/environments/${{ matrix.environment }}/plan_output.txt
        retention-days: 7
    
    - name: Post Plan to PR
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const planOutput = fs.readFileSync('terraform/environments/${{ matrix.environment }}/tfplan.txt', 'utf8');
          const exitCode = ${{ steps.plan.outputs.exit_code }};
          const summary = `${{ steps.summary.outputs.summary }}`;
          
          // Truncate plan if too long
          const maxLength = 60000;
          const truncatedPlan = planOutput.length > maxLength 
            ? planOutput.substring(0, maxLength) + '\n\n... (truncated)'
            : planOutput;
          
          // Find and update existing comment or create new one
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('Terraform Plan Results')
          );
          
          let status = '‚úÖ **No changes required**';
          if (exitCode === 2) {
            status = 'üìù **Changes will be applied**';
          } else if (exitCode === 1) {
            status = '‚ùå **Plan failed**';
          }
          
          const commentBody = `## üîß Terraform Plan Results - \`${{ matrix.environment }}\`
          
          ${status}
          
          ${summary}
          
          <details>
          <summary>üìÑ Full Plan Output</summary>
          
          \`\`\`hcl
          ${truncatedPlan}
          \`\`\`
          
          </details>
          
          ---
          
          **Actions Required:**
          - Review the plan carefully
          - Ensure all changes are intentional
          - Get approval from a maintainer before merging
          `;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: commentBody
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
          }

  terraform-cost:
    name: 'Cost Estimation'
    needs: terraform-plan
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Download Plan
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan-dev
        path: terraform/environments/dev
    
    - name: Setup Infracost
      uses: infracost/setup-infracost@v2
      with:
        api-key: ${{ secrets.INFRACOST_API_KEY }}
      continue-on-error: true
    
    - name: Generate Cost Estimate
      run: |
        infracost breakdown --path=terraform/environments/dev \
          --format=json \
          --out-file=/tmp/infracost.json
      continue-on-error: true
    
    - name: Post Cost Estimate
      if: success()
      uses: infracost/infracost-gh-action@v1
      with:
        path: /tmp/infracost.json
        behavior: update
      continue-on-error: true

  approval-check:
    name: 'Approval Status'
    needs: terraform-plan
    runs-on: ubuntu-latest
    if: needs.terraform-plan.outputs.plan_exit_code == '2'
    
    steps:
    - name: Check Approvals
      uses: actions/github-script@v7
      with:
        script: |
          const { data: reviews } = await github.rest.pulls.listReviews({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number,
          });
          
          const approvals = reviews.filter(review => review.state === 'APPROVED');
          const requiresApproval = approvals.length === 0;
          
          if (requiresApproval) {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: 'üîí **Approval Required**\n\nThis PR contains infrastructure changes and requires approval from a maintainer before it can be merged.'
            });
          }